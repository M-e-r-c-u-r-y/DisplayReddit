{"version":3,"sources":["hooks/useFetchData.js","components/ServerFailureMessage.js","components/Loading.js","components/FailedScreen.js","components/FetchListItem.js","components/InvalidPath.js","components/DisplayOptions.js","components/FetchBackendData.js","components/DisplayListItem.js","components/Button.js","components/DisplayBackendData.js","App.js","serviceWorker.js","index.js"],"names":["useFetchData","url","options","useState","loading","response","setResponse","useEffect","a","fetch","json","status","statusText","error","detail","fetchData","Loading","FailedScreen","FetchListItem","link","date","type","category","className","to","InvalidPath","JSON","stringify","DisplayOptions","onChange","map","tab","key","value","text","FetchBackendData","result","domain","output","setOutput","sortType","setSortType","sortoptions","e","target","hasOwnProperty","sorted","sort","b","c","Date","time","item","path","toUTCString","DisplayListItem","body","selftext","author","permalink","score","split","i","href","rel","style","display","justifyContent","paddingLeft","Button","onClick","DisplayBackendData","location","search","pathname","history","useHistory","useLocation","nrows","skiprows","Number","queryString","parse","pathparams","setPathParams","nextItems","setNextItems","prevItems","setPrevItems","action","push","locationparsed","listItems","App","fontSize","exact","component","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"qSAiCeA,EA9BM,SAACC,EAAKC,GAAa,IAAD,EACLC,mBAAS,CAAEC,SAAS,IADf,mBAC9BC,EAD8B,KACpBC,EADoB,KA2BrC,OAxBAC,qBAAU,YACO,uCAAG,8BAAAC,EAAA,+EAESC,MAAMR,EAAKC,GAFpB,cAERG,EAFQ,gBAGKA,EAASK,OAHd,OAGRA,EAHQ,OAIVL,EAASM,QAAU,KAAON,EAASM,OAAS,IAC9CL,EAAYI,GAEZJ,EAAY,CACVK,OAAQN,EAASM,OACjBC,WAAYP,EAASO,WACrBH,MAAO,WAVG,kDAcdH,EAAY,CACVO,MAAO,CACLC,OCtBV,2HDMoB,0DAAH,qDAqBfC,KACC,CAACd,EAAKC,IACFG,GExBMW,EAJC,WACd,OAAO,4CCQMC,EATM,SAAC,GAA4B,IAA1BN,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WAC9B,OACE,oCACE,wCAAcD,GACd,6CAAmBC,KCSVM,EAXO,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACzC,OACE,yBAAKC,UAAU,QACb,kBAAC,IAAD,CAAMC,GAAIL,GAAOA,GACjB,6BAAMC,GACN,6BAAMC,GACN,6BAAMC,KCJGG,EAJK,SAAC,GAAe,IAAbZ,EAAY,EAAZA,MACrB,OAAO,6BAAMa,KAAKC,UAAUd,EAAO,KAAM,KCY5Be,EAZQ,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAU3B,EAAc,EAAdA,QAClC,OACE,4BAAQqB,UAAU,aAAaM,SAAUA,GACtC3B,EAAQ4B,KAAI,SAACC,GAAD,OACX,4BAAQC,IAAKD,EAAIE,MAAOA,MAAOF,EAAIE,OAChCF,EAAIG,WCuFAC,EArFU,WACvB,IAEMC,EAASpC,EAAaqC,iCAHC,EAIDlC,mBAAS,IAJR,mBAItBmC,EAJsB,KAIdC,EAJc,OAKGpC,mBAAS,QALZ,mBAKtBqC,EALsB,KAKZC,EALY,KAYvBC,EACJN,EAAOhC,SAA4B,WAAjBgC,EAAO3B,OAAsB2B,EAAOvB,MAAQ,KAC5D,kBAAC,EAAD,CACEgB,SAAU,SAACc,GAAD,OAAOF,EAAYE,EAAEC,OAAOX,QACtC/B,QAVU,CACd,CAAE+B,MAAO,OAAQC,KAAM,QACvB,CAAED,MAAO,WAAYC,KAAM,YAC3B,CAAED,MAAO,cAAeC,KAAM,kBAoEhC,OAzDA3B,qBAAU,WACR,KAEI6B,EAAOS,eAAe,YACtBT,EAAOS,eAAe,UACtBT,EAAOS,eAAe,UAExB,CACA,IACIC,EAAS,KACI,aAAbN,EACFM,EAAS,YAAIV,GAAQW,MAAK,SAACvC,EAAGwC,GAAJ,OAAWxC,EAAEa,KAAO2B,EAAE3B,KAAO,GAAK,KACtC,gBAAbmB,EACTM,EAAS,YAAIV,GAAQW,MAAK,SAACvC,EAAGwC,GAAJ,OAAWA,EAAE3B,KAAOb,EAAEa,KAAO,GAAK,KACtC,SAAbmB,IACTM,EAAS,YAAIV,GAAQW,MAAK,SAAUvC,EAAGwC,GACrC,IAAIC,EAAI,IAAIC,KAAK1C,EAAE2C,MAEnB,OADQ,IAAID,KAAKF,EAAEG,MACRF,MAGfV,EACEO,EAAOhB,KAAI,SAACsB,GAAD,OACT,kBAAC,EAAD,CACEpB,IAAKoB,EAAKC,KACVlC,KAjBgB,IAiBMiC,EAAKC,KAC3BjC,KAAM,IAAI8B,KAAKE,EAAKD,MAAMG,cAC1BjC,KAAM+B,EAAK/B,KACXC,SAAU8B,EAAK9B,kBAKtB,CAACkB,EAAUJ,IAEd7B,qBAAU,WAER,GAAI6B,EAAOhC,QACTmC,EAAU,kBAAC,EAAD,YAIP,GAAqB,WAAjBH,EAAO3B,MAAoB,CAAC,IAC3BE,EAAuByB,EAAvBzB,OAAQC,EAAewB,EAAfxB,WAChB2B,EAAU,kBAAC,EAAD,CAAc5B,OAAQA,EAAQC,WAAYA,UAC1CwB,EAAOvB,MAQjB0B,EAAU,kBAAC,EAAD,CAAa1B,MAAOuB,EAAOvB,SAPrCuB,EAAOW,MAAK,SAAUvC,EAAGwC,GACvB,IAAIC,EAAI,IAAIC,KAAK1C,EAAE2C,MAEnB,OADQ,IAAID,KAAKF,EAAEG,MACRF,OAMd,CAACb,IAGF,oCACGM,EACAJ,I,wBChEQiB,EAvBS,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MAC5D,OACE,yBAAKrC,UAAU,QACb,6BACGiC,EACGA,EAAKK,MAAM,MAAM/B,KAAI,SAACsB,EAAMU,GAC1B,OAAO,yBAAK9B,IAAK8B,GAAIV,MAEvBK,EAASI,MAAM,MAAM/B,KAAI,SAACsB,EAAMU,GAC9B,OAAO,yBAAK9B,IAAK8B,GAAIV,OAG7B,uBAAGW,KAAMJ,EAAWf,OAAO,SAASoB,IAAI,uBACrCL,GAEH,yBAAKM,MAAO,CAAEC,QAAS,OAAQC,eAAgB,aAC7C,6BAAMT,GACN,yBAAKO,MAAO,CAAEG,YAAa,SAAWR,MCT/BS,EARA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASpC,EAAW,EAAXA,KACzB,OACE,4BAAQX,UAAU,SAAS+C,QAASA,GACjCpC,ICoIQqC,EA9HY,SAAC,GAAwC,IAAD,IAArCC,SAAYC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,SAG5CC,EAAUC,cACVJ,EAAWK,cAJkD,EAM7B1E,mBAAS,CAC3C2E,MALc,EAMdC,SACEC,OAAO,eAAKC,IAAYC,MAAMT,IAAUM,WAP5B,EAQRC,OAAO,eAAKC,IAAYC,MAAMT,IAAUM,UACxC,SAXyD,mBAM1DI,EAN0D,KAM9CC,EAN8C,KAc3D/B,EAAOqB,EAAQ,WAAOO,IAAYtD,UAAUwD,IAE5C/C,EAASpC,EAfA,wBAesBqD,GAhB4B,EAiBrClD,mBAAS,IAjB4B,mBAiB1DmC,EAjB0D,KAiBlDC,EAjBkD,OAkB/BpC,mBAAS,MAlBsB,mBAkB1DkF,EAlB0D,KAkB/CC,EAlB+C,OAmB/BnF,mBAAS,MAnBsB,mBAmB1DoF,EAnB0D,KAmB/CC,EAnB+C,KAqHjE,OA/FAjF,qBAAU,WACe,QAAnBoE,EAAQc,SAAuC,IAAnBrD,EAAOhC,SACrCuE,EAAQe,KAAKrC,KAEd,CAACsB,EAAStB,EAAMjB,EAAOhC,UAG1BG,qBAAU,WACR,GAAuB,QAAnBoE,EAAQc,OAAkB,CAC5B,IAAME,EAAc,eACfV,IAAYC,MAAMV,EAASC,SAEhCkB,EAAeZ,SACbC,OAAOW,EAAeZ,WAAa,EAC/BC,OAAOW,EAAeZ,UACtB,OACNY,EAAeb,MAAQK,EAAWL,MAC9Ba,EAAeZ,WAAaI,EAAWJ,UACzCK,EAAcO,MAGjB,CAACnB,EAAUG,EAASQ,IAGvB5E,qBAAU,WAER,IAAuB,IAAnB6B,EAAOhC,QACTmC,EAAU,kBAAC,EAAD,YAIP,GAAqB,WAAjBH,EAAO3B,MAAoB,CAAC,IAC3BE,EAAuByB,EAAvBzB,OAAQC,EAAewB,EAAfxB,WAChB2B,EAAU,kBAAC,EAAD,CAAc5B,OAAQA,EAAQC,WAAYA,UAIjD,GAAKwB,EAAOvB,MAef0B,EAAU,kBAAC,EAAD,CAAa1B,MAAOuB,EAAOvB,aAff,CACtB,IAAM+E,EAAYxD,EAAON,KAAI,SAACM,GAAD,OAC3B,kBAAC,EAAD,CACEJ,IAAKI,EAAOuB,UACZH,KAAMpB,EAAOoB,KACbC,SAAUrB,EAAOqB,SACjBC,OAAQtB,EAAOsB,OACfC,UAAWvB,EAAOuB,UAClBC,MAAOxB,EAAOwB,WAIlBrB,EAAUqD,MAKX,CAACxD,IAGJ7B,qBAAU,WAyBR+E,EACElD,EAAOhC,SAA4B,WAAjBgC,EAAO3B,OAAsB2B,EAAOvB,MAAQ,KAC5D,kBAAC,EAAD,CAAQyD,QA1BM,WACO,QAAnBK,EAAQc,QACVd,EAAQe,KAAKrC,GAEf+B,EAAc,2BACTD,GADQ,IAEXJ,SAAUC,OAAOG,EAAWJ,UACxBC,OAAOG,EAAWJ,UArFZ,QAwGkB7C,KAAK,UAGrCsD,EACEpD,EAAOhC,SACY,WAAjBgC,EAAO3B,OACP2B,EAAOvB,MAAQ,KAA+B,SAAxBsE,EAAWJ,SACjC,kBAAC,EAAD,CAAQT,QArBM,WACO,QAAnBK,EAAQc,QACVd,EAAQe,KAAKrC,GAEf+B,EAAc,2BACTD,GADQ,IAEXJ,SAhGU,IAiGRC,OAAOG,EAAWJ,WAAyBC,OAAOG,EAAWJ,UACzDC,OAAOG,EAAWJ,UAlGd,EAmGJ,WAYsB7C,KAAK,SAC/B,QAEL,CAACiD,EAAYR,EAAStB,EAAMjB,EAAOhC,QAASgC,EAAO3B,MAAO2B,EAAOvB,QAElE,oCACGyB,EACAiD,EACAF,IC3GQQ,EAfH,WACV,OACE,yBAAKtE,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAM0C,MAAO,CAAE6B,SAAU,WAAatE,GAAG,KAAzC,QAGA,kBAAC,IAAD,CAAOuE,OAAK,EAAC1C,KAAK,IAAI2C,UAAW7D,IACjC,kBAAC,IAAD,CAAOkB,KAAK,QAAQ2C,UAAWzB,IAC/B,kBAAC,IAAD,CAAO0B,OAAQ,kBAAM,kBAAC,IAAD,CAAUzE,GAAI,CAAEkD,SAAU,aCRnCwB,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2DCZNC,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnG,GACLoG,QAAQpG,MAAMA,EAAMqG,c","file":"static/js/main.fad8ad96.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport ServerFailureMessage from \"../components/ServerFailureMessage\";\n\nconst useFetchData = (url, options) => {\n  const [response, setResponse] = useState({ loading: true });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url, options);\n        const json = await response.json();\n        if (response.status >= 200 && response.status < 300) {\n          setResponse(json);\n        } else {\n          setResponse({\n            status: response.status,\n            statusText: response.statusText,\n            fetch: \"failed\",\n          });\n        }\n      } catch (err) {\n        setResponse({\n          error: {\n            detail: ServerFailureMessage,\n          },\n        });\n      }\n    };\n    fetchData();\n  }, [url, options]);\n  return response;\n};\n\nexport default useFetchData;\n","const ServerFailureMessage =\n  \"Our servers are experiencing high load. We regret the inconvience caused, Please contact us @abc to get more support.\";\n\nexport default ServerFailureMessage;\n","import React from \"react\";\n\nconst Loading = () => {\n  return <div>loading...</div>;\n};\n\nexport default Loading;\n","import React from \"react\";\n\nconst FailedScreen = ({ status, statusText }) => {\n  return (\n    <>\n      <div>Status: {status}</div>\n      <div>Status Text: {statusText}</div>\n    </>\n  );\n};\n\nexport default FailedScreen;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"../App.css\";\n\nconst FetchListItem = ({ link, date, type, category }) => {\n  return (\n    <div className=\"List\">\n      <Link to={link}>{link}</Link>\n      <div>{date}</div>\n      <div>{type}</div>\n      <div>{category}</div>\n    </div>\n  );\n};\n\nexport default FetchListItem;\n","import React from \"react\";\n\nconst InvalidPath = ({ error }) => {\n  return <pre>{JSON.stringify(error, null, 2)}</pre>;\n};\n\nexport default InvalidPath;\n","import React from \"react\";\nimport \"../App.css\";\n\nconst DisplayOptions = ({ onChange, options }) => {\n  return (\n    <select className=\"select-css\" onChange={onChange}>\n      {options.map((tab) => (\n        <option key={tab.value} value={tab.value}>\n          {tab.text}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nexport default DisplayOptions;\n","import React, { useState, useEffect } from \"react\";\n\nimport useFetchData from \"../hooks/useFetchData\";\n\nimport Loading from \"./Loading\";\nimport FailedScreen from \"./FailedScreen\";\nimport FetchListItem from \"./FetchListItem\";\nimport InvalidPath from \"./InvalidPath\";\nimport DisplayOptions from \"./DisplayOptions\";\n\nconst FetchBackendData = () => {\n  const domain = \"http://127.0.0.1:8000\";\n  const path = \"/display\";\n  const result = useFetchData(domain + path);\n  const [output, setOutput] = useState([]);\n  const [sortType, setSortType] = useState(\"time\");\n  const options = [\n    { value: \"time\", text: \"Time\" },\n    { value: \"comments\", text: \"Comments\" },\n    { value: \"submissions\", text: \"Submissions\" },\n  ];\n\n  const sortoptions =\n    result.loading || result.fetch === \"failed\" || result.error ? null : (\n      <DisplayOptions\n        onChange={(e) => setSortType(e.target.value)}\n        options={options}\n      />\n    );\n  // Update items display order based on sort criteria selected\n  useEffect(() => {\n    if (\n      !(\n        result.hasOwnProperty(\"loading\") ||\n        result.hasOwnProperty(\"fetch\") ||\n        result.hasOwnProperty(\"error\")\n      )\n    ) {\n      const displaydomain = \"/\";\n      let sorted = null;\n      if (sortType === \"comments\") {\n        sorted = [...result].sort((a, b) => (a.type > b.type ? 1 : -1));\n      } else if (sortType === \"submissions\") {\n        sorted = [...result].sort((a, b) => (b.type > a.type ? 1 : -1));\n      } else if (sortType === \"time\") {\n        sorted = [...result].sort(function (a, b) {\n          let c = new Date(a.time);\n          let d = new Date(b.time);\n          return d - c;\n        });\n      }\n      setOutput(\n        sorted.map((item) => (\n          <FetchListItem\n            key={item.path}\n            link={displaydomain + item.path}\n            date={new Date(item.time).toUTCString()}\n            type={item.type}\n            category={item.category}\n          />\n        ))\n      );\n    }\n  }, [sortType, result]);\n\n  useEffect(() => {\n    // Display Loading screen while fetching data from server\n    if (result.loading) {\n      setOutput(<Loading />);\n    }\n\n    // If the result of fetch is failed, display the error text\n    else if (result.fetch === \"failed\") {\n      const { status, statusText } = result;\n      setOutput(<FailedScreen status={status} statusText={statusText} />);\n    } else if (!result.error) {\n      result.sort(function (a, b) {\n        let c = new Date(a.time);\n        let d = new Date(b.time);\n        return d - c;\n      });\n    } else {\n      //Display invalid path if an Invalid route is accessed\n      setOutput(<InvalidPath error={result.error} />);\n    }\n  }, [result]);\n\n  return (\n    <>\n      {sortoptions}\n      {output}\n    </>\n  );\n};\n\nexport default FetchBackendData;\n","import React from \"react\";\nimport \"../App.css\";\n\nconst DisplayListItem = ({ body, selftext, author, permalink, score }) => {\n  return (\n    <div className=\"List\">\n      <div>\n        {body\n          ? body.split(\"\\n\").map((item, i) => {\n              return <div key={i}>{item}</div>;\n            })\n          : selftext.split(\"\\n\").map((item, i) => {\n              return <div key={i}>{item}</div>;\n            })}\n      </div>\n      <a href={permalink} target=\"_blank\" rel=\"noopener noreferrer\">\n        {permalink}\n      </a>\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <div>{author}</div>\n        <div style={{ paddingLeft: \"10px\" }}>{score}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default DisplayListItem;\n","import React from \"react\";\nimport \"../App.css\";\n\nconst Button = ({ onClick, text }) => {\n  return (\n    <button className=\"button\" onClick={onClick}>\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport useFetchData from \"../hooks/useFetchData\";\n\nimport Loading from \"./Loading\";\nimport FailedScreen from \"./FailedScreen\";\nimport DisplayListItem from \"./DisplayListItem\";\nimport InvalidPath from \"./InvalidPath\";\nimport Button from \"./Button\";\n\nconst DisplayBackendData = ({ location: { search, pathname } }) => {\n  const domain = \"http://127.0.0.1:8000\";\n  const maxrows = 5;\n  let history = useHistory();\n  let location = useLocation();\n\n  const [pathparams, setPathParams] = useState({\n    nrows: maxrows,\n    skiprows:\n      Number({ ...queryString.parse(search) }.skiprows) >= maxrows\n        ? Number({ ...queryString.parse(search) }.skiprows)\n        : \"None\",\n  });\n\n  const path = pathname + `?${queryString.stringify(pathparams)}`;\n\n  const result = useFetchData(domain + path);\n  const [output, setOutput] = useState([]);\n  const [nextItems, setNextItems] = useState(null);\n  const [prevItems, setPrevItems] = useState(null);\n\n  // Push path to history queue as needed\n  useEffect(() => {\n    if (history.action !== \"POP\" || result.loading === true) {\n      history.push(path);\n    }\n  }, [history, path, result.loading]);\n\n  // For progressing through history via next/prev and browser back/forward buttons\n  useEffect(() => {\n    if (history.action === \"POP\") {\n      const locationparsed = {\n        ...queryString.parse(location.search),\n      };\n      locationparsed.skiprows =\n        Number(locationparsed.skiprows) >= 5\n          ? Number(locationparsed.skiprows)\n          : \"None\";\n      locationparsed.nrows = pathparams.nrows;\n      if (locationparsed.skiprows !== pathparams.skiprows) {\n        setPathParams(locationparsed);\n      }\n    }\n  }, [location, history, pathparams]);\n\n  // For rendering the page based on result of fetch\n  useEffect(() => {\n    // Display Loading screen while fetching data from server\n    if (result.loading === true) {\n      setOutput(<Loading />);\n    }\n\n    // If the result of fetch is failed, display the error text\n    else if (result.fetch === \"failed\") {\n      const { status, statusText } = result;\n      setOutput(<FailedScreen status={status} statusText={statusText} />);\n    }\n\n    //Display the items if the fetch is successful\n    else if (!result.error) {\n      const listItems = result.map((result) => (\n        <DisplayListItem\n          key={result.permalink}\n          body={result.body}\n          selftext={result.selftext}\n          author={result.author}\n          permalink={result.permalink}\n          score={result.score}\n        />\n      ));\n\n      setOutput(listItems);\n    } else {\n      //Display invalid path if an Invalid route is accessed\n      setOutput(<InvalidPath error={result.error} />);\n    }\n  }, [result]);\n\n  // For creating next and back buttons as necessary\n  useEffect(() => {\n    const nextClick = () => {\n      if (history.action === \"POP\") {\n        history.push(path);\n      }\n      setPathParams({\n        ...pathparams,\n        skiprows: Number(pathparams.skiprows)\n          ? Number(pathparams.skiprows) + maxrows\n          : maxrows,\n      });\n    };\n\n    const prevClick = () => {\n      if (history.action === \"POP\") {\n        history.push(path);\n      }\n      setPathParams({\n        ...pathparams,\n        skiprows:\n          Number(pathparams.skiprows) !== maxrows && Number(pathparams.skiprows)\n            ? Number(pathparams.skiprows) - maxrows\n            : \"None\",\n      });\n    };\n    setNextItems(\n      result.loading || result.fetch === \"failed\" || result.error ? null : (\n        <Button onClick={nextClick} text=\"Next\" />\n      )\n    );\n    setPrevItems(\n      result.loading ||\n        result.fetch === \"failed\" ||\n        result.error ? null : pathparams.skiprows !== \"None\" ? (\n        <Button onClick={prevClick} text=\"Prev\" />\n      ) : null\n    );\n  }, [pathparams, history, path, result.loading, result.fetch, result.error]);\n  return (\n    <>\n      {output}\n      {prevItems}\n      {nextItems}\n    </>\n  );\n};\n\nexport default DisplayBackendData;\n","import React from \"react\";\nimport {\n  Link,\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport \"./App.css\";\nimport FetchBackendData from \"./components/FetchBackendData\";\nimport DisplayBackendData from \"./components/DisplayBackendData\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Link style={{ fontSize: \"x-large\" }} to=\"/\">\n          Home\n        </Link>\n        <Route exact path=\"/\" component={FetchBackendData} />\n        <Route path=\"/data\" component={DisplayBackendData} />\n        <Route render={() => <Redirect to={{ pathname: \"/\" }} />} />\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}